"""empty message

Revision ID: 18e790856b53
Revises: cb72058cf4e4
Create Date: 2018-07-20 02:51:24.952915

"""
# revision identifiers, used by Alembic.
revision = '18e790856b53'
down_revision = 'cb72058cf4e4'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    connection = op.get_bind()

    with op.batch_alter_table('records') as bop:
        bop.alter_column('record_format_version', new_column_name='record_version')
        bop.alter_column('payload_format_version', new_column_name='payload_version')
        bop.alter_column('tsp', new_column_name='timestamp_client', type_=sa.NUMERIC())
        bop.alter_column('tsp_server', new_column_name='timestamp_server', type_=sa.NUMERIC(), nullable=False,
                    server_default=sa.text("(date_part('epoch'::text, timezone('utc'::text, now())))::integer"))
        bop.alter_column('os_name', new_column_name='system_name', type_=sa.TEXT())
        bop.alter_column('machine', new_column_name='host_type')
        bop.alter_column('payload', type_=sa.TEXT(), nullable=False)
        bop.alter_column('bios_version', type_=sa.TEXT())
        bop.alter_column('board_name', type_=sa.TEXT())
        bop.alter_column('cpu_model', type_=sa.TEXT())
        bop.alter_column('event_id', type_=sa.TEXT())
    op.add_column('records', sa.Column('build', sa.TEXT(), nullable=False, server_default=''))
    op.add_column('records', sa.Column('classification', sa.TEXT(), nullable=False, server_default=''))
    op.drop_column('records', 'dupe_of')
    op.drop_column('records', 'icon')
    op.drop_column('records', 'buildstamp')
    op.drop_column('records', 'hide')
    op.drop_column('records', 'dupecount')
    op.drop_column('records', 'security')
    op.drop_column('records', 'dupemaster')

    connection.execute("""
UPDATE records SET build = build.build FROM build WHERE build.id = records.build_id
    """)

    connection.execute("""
UPDATE records SET classification = classification.classification FROM classification WHERE classification.id = records.classification_id
    """)

    connection.execute("""
UPDATE records SET payload = backtrace
    """)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    connection = op.get_bind()

    with op.batch_alter_table('records') as bop:
        bop.alter_column('record_version', new_column_name='record_format_version')
        bop.alter_column('payload_version', new_column_name='payload_format_version')
        bop.alter_column('timestamp_client', new_column_name='tsp', type_=sa.INTEGER())
        bop.alter_column('timestamp_server', new_column_name='tsp_server', type_=sa.INTEGER())
        bop.alter_column('system_name', new_column_name='os_name')
        bop.alter_column('host_type', new_column_name='machine')
        #bop.alter_column('payload', type_=sa.LargeBinary(), nullable=True)
    op.drop_column('records', 'classification')
    op.drop_column('records', 'build')
    op.add_column('records', sa.Column('dupemaster', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('security', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('dupecount', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('hide', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('buildstamp', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('icon', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('dupe_of', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))

    connection.execute("""
ALTER TABLE records ALTER COLUMN payload TYPE BYTEA USING convert_to(payload, 'LATIN1')
    """)

    # ### end Alembic commands ###
